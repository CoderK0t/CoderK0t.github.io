import logging
import os
import json
import time
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message, CallbackQuery, PreCheckoutQuery, 
    SuccessfulPayment, LabeledPrice, InlineKeyboardButton, 
    InlineKeyboardMarkup, WebAppInfo
)
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8341085900:AAEarWlWJqLfVLzLpLw3ZGopuD812o78g0Q"
MINI_APP_URL = "https://coderk0t.github.io/"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_balances = {}
payment_verifications = {}

def get_main_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üéÅ –ò–≥—Ä–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å!", web_app=WebAppInfo(url=MINI_APP_URL))
    keyboard.button(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")
    keyboard.adjust(1)
    return keyboard.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user = message.from_user
    welcome_text = (
        f"<b>üé≤ CubeGift</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"<b>–¢–≤–æ—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ø—Ä–∏–∑–∞–º–∏</b> üéÅ\n\n"
        f"‚Ä¢ –ò–≥—Ä–∞–π –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø–æ–¥–∞—Ä–∫–∏\n"
        f"‚Ä¢ –ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Telegram Stars\n"
        f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        f"<b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá</b>"
    )
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message(F.web_app_data)
async def handle_web_app_data(message: Message):
    try:
        web_app_data = message.web_app_data
        data = json.loads(web_app_data.data)
        user = message.from_user
        logger.info(f"Received data from {user.id}: {data}")

        if data.get('type') == 'payment':
            await process_payment_request(message, data, user)
        else:
            await message.answer("üéâ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏—é...")

    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def process_payment_request(message: Message, data: Dict[str, Any], user: types.User):
    amount = data.get('amount', 100)
    title = "üéÆ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ CubeGift"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –∏–≥—Ä–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü"
    payload = f"stars_{amount}_{user.id}_{int(time.time())}"
    prices = [LabeledPrice(label="–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞", amount=amount)]
    
    try:
        builder = InlineKeyboardBuilder()
        builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠ê", pay=True)
        
        await message.answer_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token="",
            currency="XTR",
            prices=prices,
            max_tip_amount=1000,
            suggested_tip_amounts=[100, 300, 500],
            start_parameter=f"cube_gift_{amount}",
            reply_markup=builder.as_markup()
        )
        
        payment_verifications[payload] = {
            'user_id': user.id,
            'amount': amount,
            'timestamp': time.time()
        }
        
        logger.info(f"Invoice created for user {user.id}, amount: {amount}")
        
    except Exception as e:
        logger.error(f"Invoice creation error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.pre_checkout_query()
async def precheckout_callback(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@dp.message(F.successful_payment)
async def successful_payment_callback(message: Message):
    payment = message.successful_payment
    user_id = message.from_user.id
    
    try:
        payload_parts = payment.invoice_payload.split('_')
        if len(payload_parts) >= 4:
            amount = int(payload_parts[1])
            
            if payment_verifications.get(payment.invoice_payload):
                user_balances[user_id] = user_balances.get(user_id, 0) + amount
                
                success_text = (
                    f"üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{amount}</b> –µ–¥–∏–Ω–∏—Ü\n"
                    f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{payment.telegram_payment_charge_id}</code>\n\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balances[user_id]}</b> –µ–¥–∏–Ω–∏—Ü\n\n"
                    f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—É —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞! üéÆ"
                )
                
                await message.answer(success_text)
                del payment_verifications[payment.invoice_payload]
                logger.info(f"Payment successful for user {user_id}, amount: {amount}")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω")
            
    except Exception as e:
        logger.error(f"Payment processing error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@dp.message(Command("balance"))
async def balance_command(message: Message):
    user_id = message.from_user.id
    balance = user_balances.get(user_id, 0)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", web_app=WebAppInfo(url=MINI_APP_URL))
    keyboard.button(text="üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=MINI_APP_URL))
    keyboard.adjust(1)
    
    balance_text = (
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mini App –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /buy <i>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</i>"
    )
    
    await message.answer(balance_text, reply_markup=keyboard.as_markup())

@dp.message(Command("buy"))
async def buy_command(message: Message, command: CommandObject):
    try:
        if command.args is None:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–º–∏–Ω–∏–º—É–º 10)")
            return
            
        amount = int(command.args)
        
        if amount < 1:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 –µ–¥–∏–Ω–∏—Ü")
            return
            
        await process_payment_request(message, {'amount': amount, 'currency': 'stars'}, message.from_user)
        
    except ValueError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")

@dp.callback_query(F.data == "balance")
async def balance_button_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    balance = user_balances.get(user_id, 0)
    await callback.answer()
    await callback.message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –µ–¥–∏–Ω–∏—Ü")

@dp.message(F.text)
async def handle_message(message: Message):
    text = message.text.lower()

    if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', 'start', '–∏–≥—Ä–∞', 'game']):
        welcome_text = (
            "üé≤ <b>CubeGift</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏? üéÅ\n\n"
            "–ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Telegram Stars –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å!\n\n"
            "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
        )
        await message.answer(welcome_text, reply_markup=get_main_keyboard())
    elif any(word in text for word in ['–±–∞–ª–∞–Ω—Å', 'balance', '–¥–µ–Ω—å–≥–∏', 'money', 'stars']):
        await balance_command(message)
    else:
        default_text = (
            "üé≤ <b>CubeGift</b>\n\n"
            "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è... üòï\n\n"
            "–•–æ—á–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø–æ–¥–∞—Ä–∫–∏? üéÅ\n"
            "–ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Stars –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å! üëá"
        )
        await message.answer(default_text, reply_markup=get_main_keyboard())

@dp.error()
async def error_handler(event: types.ErrorEvent):
    logger.error(f"Exception while handling an update: {event.exception}")

async def main():
    logger.info("üé≤ CubeGift –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    logger.info("üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram Stars (XTR)")
    logger.info("üåê Web App URL: %s", MINI_APP_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())