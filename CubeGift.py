import logging
import os
import json
import hmac
import hashlib
import time
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, PreCheckoutQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8341085900:AAEarWlWJqLfVLzLpLw3ZGopuD812o78g0Q"
MINI_APP_URL = "https://coderk0t.github.io/"
PROVIDER_TOKEN = os.getenv('TELEGRAM_STARS_PROVIDER_TOKEN', 'TEST_PROVIDER_TOKEN')  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_balances = {}
payment_verifications = {}

def verify_telegram_init_data(init_data: str, bot_token: str) -> bool:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram"""
    try:
        parsed_data = dict(param.split('=') for param in init_data.split('&'))
        hash_str = parsed_data.pop('hash', '')
        
        data_check_string = '\n'.join(
            f"{key}={value}" for key, value in sorted(parsed_data.items())
        )
        
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=bot_token.encode(),
            digestmod=hashlib.sha256
        ).digest()
        
        calculated_hash = hmac.new(
            key=secret_key,
            msg=data_check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()
        
        return calculated_hash == hash_str
    except Exception as e:
        logger.error(f"Verification error: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user

    keyboard = [
        [InlineKeyboardButton("üéÅ –ò–≥—Ä–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å!", web_app=WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        f"<b>üé≤ CubeGift</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"<b>–¢–≤–æ—è –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –ø—Ä–∏–∑–∞–º–∏</b> üéÅ\n\n"
        f"‚Ä¢ –ò–≥—Ä–∞–π –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –∫—Ä—É—Ç—ã–µ –ø–æ–¥–∞—Ä–∫–∏\n"
        f"‚Ä¢ –ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Telegram Stars\n"
        f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        f"<b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá</b>",
        reply_markup=reply_markup
    )

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        if not update.message or not update.message.web_app_data:
            return

        web_app_data = update.message.web_app_data
        data = json.loads(web_app_data.data)
        user = update.effective_user
        
        logger.info(f"Received data from {user.id}: {data}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if data.get('type') == 'payment':
            await process_payment_request(update, data, user, context)
        elif data.get('type') == 'balance_request':
            await send_balance_update(user.id)
        else:
            await update.message.reply_text("üéâ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –æ–ø–µ—Ä–∞—Ü–∏—é...")

    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

async def process_payment_request(update: Update, data: Dict[str, Any], user, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    amount = data.get('amount', 100)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ Telegram Stars
    title = "üéÆ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ CubeGift"
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –∏–≥—Ä–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü"
    payload = f"stars_{amount}_{user.id}_{int(time.time())}"
    
    prices = [LabeledPrice("–ò–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞", amount)]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
        await context.bot.send_invoice(
            chat_id=user.id,
            title=title,
            description=description,
            payload=payload,
            provider_token=PROVIDER_TOKEN,
            currency="XTR",  # –í–∞–ª—é—Ç–∞ Telegram Stars
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            max_tip_amount=1000,
            suggested_tip_amounts=[100, 300, 500],
            start_parameter=f"cube_gift_{amount}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        payment_verifications[payload] = {
            'user_id': user.id,
            'amount': amount,
            'timestamp': time.time()
        }
        
        logger.info(f"Invoice created for user {user.id}, amount: {amount}")
        
    except Exception as e:
        logger.error(f"Invoice creation error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = update.message.successful_payment
    user_id = update.effective_user.id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
        payload_parts = payment.invoice_payload.split('_')
        if len(payload_parts) >= 4:
            amount = int(payload_parts[1])
            target_user_id = int(payload_parts[2])
            
            # –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            if payment_verifications.get(payment.invoice_payload):
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                user_balances[user_id] = user_balances.get(user_id, 0) + amount
                
                await update.message.reply_html(
                    f"üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!</b>\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{amount}</b> –µ–¥–∏–Ω–∏—Ü\n"
                    f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{payment.telegram_payment_charge_id}</code>\n\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user_balances[user_id]}</b> –µ–¥–∏–Ω–∏—Ü\n\n"
                    f"–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –∏–≥—Ä—É —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞! üéÆ"
                )
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                del payment_verifications[payment.invoice_payload]
                
                logger.info(f"Payment successful for user {user_id}, amount: {amount}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            await update.message.reply_text("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω")
            
    except Exception as e:
        logger.error(f"Payment processing error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    balance = user_balances.get(user_id, 0)
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", web_app=WebAppInfo(url=MINI_APP_URL))],
        [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä—É", web_app=WebAppInfo(url=MINI_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {balance} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mini App –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /buy <i>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</i>",
        reply_markup=reply_markup
    )

async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã"""
    try:
        amount = int(context.args[0]) if context.args and context.args[0].isdigit() else 100
        
        if amount < 10:
            await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10 –µ–¥–∏–Ω–∏—Ü")
            return
            
        await process_payment_request(update, {'amount': amount, 'currency': 'stars'}, update.effective_user, context)
        
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /buy <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> (–º–∏–Ω–∏–º—É–º 10)")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "balance":
        user_id = query.from_user.id
        balance = user_balances.get(user_id, 0)
        await query.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –µ–¥–∏–Ω–∏—Ü")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message:
        return

    keyboard = [
        [InlineKeyboardButton("üéÅ –ò–≥—Ä–∞—Ç—å –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å!", web_app=WebAppInfo(url=MINI_APP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = update.message.text.lower()

    if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', 'start', '–∏–≥—Ä–∞', 'game']):
        await update.message.reply_html(
            "üé≤ <b>CubeGift</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏? üéÅ\n\n"
            "–ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Telegram Stars –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å!\n\n"
            "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
            reply_markup=reply_markup
        )
    elif any(word in text for word in ['–±–∞–ª–∞–Ω—Å', 'balance', '–¥–µ–Ω—å–≥–∏', 'money', 'stars']):
        await balance_command(update, context)
    else:
        await update.message.reply_html(
            "üé≤ <b>CubeGift</b>\n\n"
            "–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è... üòï\n\n"
            "–•–æ—á–µ—à—å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø–æ–¥–∞—Ä–∫–∏? üéÅ\n"
            "–ü–æ–ø–æ–ª–Ω—è–π –±–∞–ª–∞–Ω—Å Stars –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å! üëá",
            reply_markup=reply_markup
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("buy", buy_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üé≤ CubeGift –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–ª–Ω–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print("üí∞ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Telegram Stars (XTR)")
    print("üåê Web App URL:", MINI_APP_URL)
    print("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    application.run_polling()

if __name__ == "__main__":
    main()